{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\OneDrive\\\\Desktop\\\\ReactJS\\\\contacts-app\\\\src\\\\pages\\\\AddContact.js\";\n// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport { Container, Form, FormGroup, Label, Input, Button, Spinner, Row, Col } from \"reactstrap\"; // to compress image before uploading to the server\n\nimport { readAndCompressImage } from \"browser-image-resizer\"; // configs for image resizing\n//TODO: DONE: add image configurations\n\nimport { imageConfig } from '../utils/config';\nimport { MdAddCircleOutline } from \"react-icons/md\";\nimport { v4 } from \"uuid\"; // context stuffs\n\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const {\n    state,\n    dispatch\n  } = useContext(ContactContext);\n  const {\n    contactToUpdate,\n    contactToUpdateKey\n  } = state; // history hooks from react router dom to send to different page\n\n  const history = useHistory(); // simple state of all component\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false); // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture); // also setting is update to true to make the update action instead the addContact action\n\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]); // To upload image to firebase and then set the the image link in the state of the app\n\n  const imagePicker = async e => {\n    // TODO: upload image and set D-URL to state\n    try {\n      const file = e.target.files[0];\n      var metadata = {\n        contentType: file.type\n      };\n      let resizedImage = await readAndCompressImage(file, imageConfig);\n      const storageRef = await firebase.storage().ref();\n      var uploadTask = storageRef.child('images/' + file.name).put(resizedImage, metadata);\n      uploadTask.on(firebase.storafe.TaskEvent.STATE_CHANGED, snapshot => {\n        setIsUploading(true);\n        var progress = snapshot.byteTransferred / snapshot.totalBytes * 100;\n\n        switch (snapshot.state) {\n          case firebase.storage.TaskState.PAUSED:\n            setIsUploading(false);\n            console.log(\"uploading is paused\");\n            break;\n\n          case firebase.storage.TaskState.RUNNING:\n            setIsUploading(false);\n            console.log(\"uploading is in Progress...\");\n            break;\n        }\n\n        if (progress == 100) {\n          setIsUploading(false);\n          toast(\"uploaded\", {\n            type: \"success\"\n          });\n        }\n      }, error => {\n        toast(\"something is wrong in state changed\", {\n          type: \"error\"\n        });\n      }, () => {\n        uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n          setDownloadUrl(downloadURL);\n        }).catch(err => console.log(err));\n      });\n    } catch (error) {\n      console.error(error);\n      toast('Something went wrong', {\n        type: \"error\"\n      });\n    }\n  }; // setting contact to firebase DB\n\n\n  const addContact = async () => {\n    //TODO: add contact method\n    try {\n      firebase.database().ref(\"conatcts/\" + v4()).set({\n        name,\n        email,\n        phoneNumber,\n        address,\n        picture: downloadUrl,\n        star\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }; // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n\n\n  const updateContact = async () => {\n    //TODO: update contact method\n    try {\n      firebase.database().ref(\"contacts/\" + contactToUpdateKey).set({\n        name,\n        email,\n        phoneNumber,\n        address,\n        picture: downloadUrl,\n        star\n      });\n    } catch (error) {\n      console.log(error);\n      toast(\"oppss\", {\n        toast: \"error\"\n      });\n    }\n  }; // firing when the user click on submit button or the form has been submitted\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    isUpdate ? updateContact() : addContact();\n    toast(\"success\", {\n      type: \"success\"\n    }); // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    }); // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n\n    history.push(\"/\");\n  }; // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    className: \"offset-md-3 p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, isUploading ? /*#__PURE__*/React.createElement(Spinner, {\n    type: \"grow\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"imagepicker\",\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: downloadUrl,\n    alt: \"\",\n    className: \"profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    id: \"imagepicker\",\n    accept: \"image/*\",\n    multiple: false,\n    onChange: e => imagePicker(e),\n    className: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    placeholder: \"Name\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"email\",\n    name: \"email\",\n    id: \"email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    name: \"number\",\n    id: \"phonenumber\",\n    value: phoneNumber,\n    onChange: e => setPhoneNumber(e.target.value),\n    placeholder: \"phone number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    name: \"area\",\n    id: \"area\",\n    value: address,\n    onChange: e => setAddress(e.target.value),\n    placeholder: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    onChange: () => {\n      setStar(!star);\n    },\n    checked: star,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  }, \"Mark as Star\"))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    block: true,\n    className: \"text-uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, isUpdate ? \"Update Contact\" : \"Add Contact\")))));\n};\n\nexport default AddContact;","map":{"version":3,"sources":["C:/Users/shiva/OneDrive/Desktop/ReactJS/contacts-app/src/pages/AddContact.js"],"names":["React","useState","useContext","useEffect","firebase","Container","Form","FormGroup","Label","Input","Button","Spinner","Row","Col","readAndCompressImage","imageConfig","MdAddCircleOutline","v4","ContactContext","CONTACT_TO_UPDATE","useHistory","toast","AddContact","state","dispatch","contactToUpdate","contactToUpdateKey","history","name","setName","email","setEmail","phoneNumber","setPhoneNumber","address","setAddress","isUploading","setIsUploading","downloadUrl","setDownloadUrl","star","setStar","isUpdate","setIsUpdate","picture","imagePicker","e","file","target","files","metadata","contentType","type","resizedImage","storageRef","storage","ref","uploadTask","child","put","on","storafe","TaskEvent","STATE_CHANGED","snapshot","progress","byteTransferred","totalBytes","TaskState","PAUSED","console","log","RUNNING","error","getDownloadURL","then","downloadURL","catch","err","addContact","database","set","updateContact","handleSubmit","preventDefault","payload","key","push","value"],"mappings":"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","sourcesContent":["// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\n\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Spinner,\n  Row,\n  Col\n} from \"reactstrap\";\n\n// to compress image before uploading to the server\nimport { readAndCompressImage } from \"browser-image-resizer\";\n\n// configs for image resizing\n//TODO: DONE: add image configurations\nimport {imageConfig} from '../utils/config'\nimport { MdAddCircleOutline } from \"react-icons/md\";\n\nimport { v4 } from \"uuid\";\n\n// context stuffs\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const { state, dispatch } = useContext(ContactContext);\n\n  const { contactToUpdate, contactToUpdateKey } = state;\n\n  // history hooks from react router dom to send to different page\n  const history = useHistory();\n\n  // simple state of all component\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture);\n\n      // also setting is update to true to make the update action instead the addContact action\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]);\n\n  // To upload image to firebase and then set the the image link in the state of the app\n  const imagePicker = async e => {\n    // TODO: upload image and set D-URL to state\n\n\n    try {\n      const file = e.target.files[0]\n\n      var metadata ={\n        contentType : file.type\n      }\n\n      let resizedImage = await readAndCompressImage(file, imageConfig)\n\n      const storageRef = await firebase.storage().ref()\n      var uploadTask = storageRef\n      .child('images/' + file.name)\n      .put(resizedImage, metadata)\n\n      uploadTask.on(\n        firebase.storafe.TaskEvent.STATE_CHANGED,\n        snapshot => {\n          setIsUploading(true)\n          var progress = (snapshot.byteTransferred/snapshot.totalBytes) * 100\n        \n          switch (snapshot.state) {\n            case firebase.storage.TaskState.PAUSED:\n                setIsUploading(false);\n                console.log(\"uploading is paused\")\n              break;\n             case firebase.storage.TaskState.RUNNING:\n                setIsUploading(false);\n                console.log(\"uploading is in Progress...\")\n              break;\n          \n          }\n          if (progress == 100) {\n            setIsUploading(false)\n            toast(\"uploaded\", {type: \"success\"});\n          }\n\n       \n        },\n        error => {\n          toast(\"something is wrong in state changed\", {type: \"error\"})\n        },\n\n        () => {\n          uploadTask.snapshot.ref.getDownloadURL()\n          .then(downloadURL => {setDownloadUrl(downloadURL)})\n          .catch(err => console.log(err))\n        }\n\n      )\n\n\n\n    } catch (error) {\n      console.error(error)\n      toast('Something went wrong' , {type: \"error\"})\n      \n    }\n  };\n\n  // setting contact to firebase DB\n  const addContact = async () => {\n    //TODO: add contact method\n    try {\n      firebase.database()\n      .ref(\"conatcts/\" + v4())\n      .set({\n          name,\n          email,\n          phoneNumber,\n          address, \n          picture:downloadUrl,\n          star\n        });\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n  // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n  const updateContact = async () => {\n    //TODO: update contact method\n    try {\n      firebase.database().ref(\"contacts/\" + contactToUpdateKey )\n      .set({\n        name,\n        email,\n        phoneNumber,\n        address,\n        picture: downloadUrl,\n        star\n      })\n    } catch (error) {\n      console.log(error)\n      toast(\"oppss\" , {toast:\"error\"})\n      \n    }\n  };\n\n  // firing when the user click on submit button or the form has been submitted\n  const handleSubmit = e => {\n    e.preventDefault();\n    isUpdate ? updateContact() : addContact() \n\n    toast(\"success\" , {type: \"success\"})\n\n    // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    });\n\n    // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n    history.push(\"/\");\n  };\n\n  // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n  return (\n    <Container fluid className=\"mt-5\">\n      <Row>\n        <Col md=\"6\" className=\"offset-md-3 p-2\">\n          <Form onSubmit={handleSubmit}>\n            <div className=\"text-center\">\n              {isUploading ? (\n                <Spinner type=\"grow\" color=\"primary\" />\n              ) : (\n                <div>\n                  <label htmlFor=\"imagepicker\" className=\"\">\n                    <img src={downloadUrl} alt=\"\" className=\"profile\" />\n                  </label>\n                  <input\n                    type=\"file\"\n                    name=\"image\"\n                    id=\"imagepicker\"\n                    accept=\"image/*\"\n                    multiple={false}\n                    onChange={e => imagePicker(e)}\n                    className=\"hidden\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"Email\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"number\"\n                name=\"number\"\n                id=\"phonenumber\"\n                value={phoneNumber}\n                onChange={e => setPhoneNumber(e.target.value)}\n                placeholder=\"phone number\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                name=\"area\"\n                id=\"area\"\n                value={address}\n                onChange={e => setAddress(e.target.value)}\n                placeholder=\"address\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  onChange={() => {\n                    setStar(!star);\n                  }}\n                  checked={star}\n                />{\" \"}\n                <span className=\"text-right\">Mark as Star</span>\n              </Label>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              block\n              className=\"text-uppercase\"\n            >\n              {isUpdate ? \"Update Contact\" : \"Add Contact\"}\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AddContact;\n"]},"metadata":{},"sourceType":"module"}